input {
        file {
                path => '/var/log/mysql/audit.log'
                type => 'percona-audit'
                start_position => 'beginning'
                codec => json
        }
}
filter {
              date {
                      match => [ "[audit_record][timestamp]", "YYYY-MM-dd'T'H:mm:ss' 'ZZZ", "ISO8601" ]
                      target => ["@timestamp"]
              }

              if [audit_record][user] == "pct[pct] @ localhost [127.0.0.1]" {
                      drop {}
              }

              if [audit_record][command_class] == "select" {
                      grok {
                              match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} %{GREEDYDATA:[audit_record][columns]} (from|FROM) %{WORD:[audit_record][table]}" ]
                              remove_field => "[audit_record][qtype]"
                      }
              }

              if [audit_record][command_class] == "update" {
                      grok {
                              match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} %{WORD:[audit_record][table]}" ]
                              remove_field => "[audit_record][qtype]"
                      }
              }

              if [audit_record][command_class] == "insert" {
                      grok {
                              match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} (into|INTO) %{WORD:[audit_record][table]}" ]
                              remove_field => "[audit_record][qtype]"
                      }
              }

              if [audit_record][command_class] == "" {
                      grok {
                              match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} (into|INTO) %{WORD:[audit_record][table]}" ]
                              remove_field => "[audit_record][qtype]"
                      }
              }

             if [audit_record][command_class] == "delete" {
                      grok {
                              match => [ "[audit_record][sqltext]", "%{WORD:qtype} (from|FROM) %{WORD:[audit_record][table]}" ]
                              remove_field => "[audit_record][qtype]"
                      }
              }

             if [audit_record][command_class] == "alter_table" {
                      grok {
                              match => [ "[audit_record][sqltext]", "(%{WORD:[audit_record][qtype]} %{WORD:object} %{DATA:[audit_record][table]} %{DATA:[audit_record][verb]} %{DATA:[audit_record][struct]} %{GREEDYDATA})" ]
                              remove_field => "object"
                              remove_field => "[audit_record][qtype]"
                      }
              }

              if [audit_record][command_class] == "set_option" {
                      grok {
                              match => [ "[audit_record][sqltext]", "(%{WORD:[audit_record][qtype]} %{WORD:[audit_record][scope]} %{WORD:[audit_record][variable]}(=| = )%{GREEDYDATA:[audit_record][value]})" ]
                              remove_field => "[audit_record][qtype]"
                      }
              }

              if [audit_record][command_class] == "grant" {
                      grok {
                              match => [ "[audit_record][sqltext]", "(%{WORD:[audit_record][qtype]} %{WORD:[audit_record][scope]} %{WORD:[audit_record][variable]}(=| = )%{GREEDYDATA:[audit_record][value]})" ]
                              remove_field => "[audit_record][qtype]"
                      }
              }
}

output {
        stdout { codec => "rubydebug" }

        elasticsearch {
                  host => '127.0.0.1'
        }
}
